import { Settings, VulnerabilityNodeData } from "webgl-test-shared";
import { CAMERA_UNIFORM_BUFFER_BINDING_INDEX, createWebGLProgram, gl } from "../webgl";
import OPTIONS from "../options";

const NODE_THICKNESS = 3;
const NODE_RADIUS = 8;
const NODE_CIRCLE_VERTEX_COUNT = 10;

let program: WebGLProgram;

let vulnerabilityNodes: ReadonlyArray<VulnerabilityNodeData>;

export function setVisibleVulnerabilityNodes(newVulnerabilityNodes: ReadonlyArray<VulnerabilityNodeData>): void {
   // @Speed: Garbage collection
   vulnerabilityNodes = newVulnerabilityNodes;
}

export function createVulnerabilityNodeShaders(): void {
   const vertexShaderText = `#version 300 es
   precision mediump float;
   precision mediump int;
   
   layout(std140) uniform Camera {
      uniform vec2 u_playerPos;
      uniform vec2 u_halfWindowSize;
      uniform float u_zoom;
   };
   
   layout(location = 0) in vec2 a_position;
   layout(location = 1) in float a_vulnerability;

   out float v_vulnerability;
   
   void main() {
      vec2 screenPos = (a_position - u_playerPos) * u_zoom + u_halfWindowSize;
      vec2 clipSpacePos = screenPos / u_halfWindowSize - 1.0;
      gl_Position = vec4(clipSpacePos, 0.0, 1.0);

      v_vulnerability = a_vulnerability;
   }
   `;
   const fragmentShaderText = `#version 300 es
   precision mediump float;
   precision mediump int;

   #define MAX_COLOUR vec4(1.0, 0.0, 0.0, 1.0)
   #define MIN_COLOUR vec4(0.0, 1.0, 0.0, 1.0)
   
   in float v_vulnerability;
   
   out vec4 outputColour;
   
   void main() {
      outputColour = mix(MIN_COLOUR, MAX_COLOUR, v_vulnerability);
   }
   `;
   
   program = createWebGLProgram(gl, vertexShaderText, fragmentShaderText);

   const lineCameraBlockIndex = gl.getUniformBlockIndex(program, "Camera");
   gl.uniformBlockBinding(program, lineCameraBlockIndex, CAMERA_UNIFORM_BUFFER_BINDING_INDEX);
}

export function renderVulnerabilityNodes(): void {
   if (!OPTIONS.showVulnerabilityNodes) {
      return;
   }
   
   gl.useProgram(program);

   // Calculate vertices
   let trigIdx = 0;
   const vertexData = new Float32Array(vulnerabilityNodes.length * 6 * 3);
   for (let i = 0; i < vulnerabilityNodes.length; i++) {
      const nodeData = vulnerabilityNodes[i];

      const vulnerability = nodeData.vulnerability / 100;

      const x = nodeData.index % Settings.VULNERABILITY_NODES_IN_WORLD_WIDTH * Settings.VULNERABILITY_NODE_SEPARATION;
      const y = Math.floor(nodeData.index / Settings.VULNERABILITY_NODES_IN_WORLD_WIDTH) * Settings.VULNERABILITY_NODE_SEPARATION;
      
      const step = 2 * Math.PI / NODE_CIRCLE_VERTEX_COUNT;

      // Add the outer vertices
      for (let radians = 0, n = 0; n < NODE_CIRCLE_VERTEX_COUNT; radians += step, n++) {
         // @Speed: Garbage collection

         const sinRadians = Math.sin(radians);
         const cosRadians = Math.cos(radians);
         const sinNextRadians = Math.sin(radians + step);
         const cosNextRadians = Math.cos(radians + step);

         const blX = x + (NODE_RADIUS - NODE_THICKNESS) * sinRadians;
         const blY = y + (NODE_RADIUS - NODE_THICKNESS) * cosRadians;
         const brX = x + (NODE_RADIUS - NODE_THICKNESS) * sinNextRadians;
         const brY = y + (NODE_RADIUS - NODE_THICKNESS) * cosNextRadians;
         const tlX = x + (NODE_RADIUS) * sinRadians;
         const tlY = y + (NODE_RADIUS) * cosRadians;
         const trX = x + (NODE_RADIUS) * sinNextRadians;
         const trY = y + (NODE_RADIUS) * cosNextRadians;

         const vertexOffset = trigIdx * 6 * 3;

         vertexData[vertexOffset] = blX;
         vertexData[vertexOffset + 1] = blY;
         vertexData[vertexOffset + 2] = vulnerability;

         vertexData[vertexOffset + 3] = brX;
         vertexData[vertexOffset + 4] = brY;
         vertexData[vertexOffset + 5] = vulnerability;

         vertexData[vertexOffset + 6] = tlX;
         vertexData[vertexOffset + 7] = tlY;
         vertexData[vertexOffset + 8] = vulnerability;

         vertexData[vertexOffset + 9] = tlX;
         vertexData[vertexOffset + 10] = tlY;
         vertexData[vertexOffset + 11] = vulnerability;

         vertexData[vertexOffset + 12] = brX;
         vertexData[vertexOffset + 13] = brY;
         vertexData[vertexOffset + 14] = vulnerability;

         vertexData[vertexOffset + 15] = trX;
         vertexData[vertexOffset + 16] = trY;
         vertexData[vertexOffset + 17] = vulnerability;

         trigIdx++;
      }
   }

   const buffer = gl.createBuffer();
   gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
   gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);

   gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);
   gl.vertexAttribPointer(1, 1, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * Float32Array.BYTES_PER_ELEMENT);

   gl.enableVertexAttribArray(0);
   gl.enableVertexAttribArray(1);

   gl.drawArrays(gl.TRIANGLES, 0, trigIdx * 6);
}